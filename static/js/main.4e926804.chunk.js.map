{"version":3,"sources":["components/flashcard.jsx","App.js","serviceWorker.js","index.js"],"names":["FlashCard","state","data","randomCard","finalChoice","showAnswers","generateRandomCard","console","log","randomNumber","Math","floor","random","setState","generateAnswers","handleChange","element","document","getElementById","options","selectedIndex","text","Fragment","className","id","onChange","this","value","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uQAyHeA,E,2MA9GbC,MAAQ,CACNC,KAAM,CACJ,CAAC,cAAe,yCAAY,WAC5B,CAAC,qBAAY,wCAAW,qBACxB,CAAC,gBAAO,qBAAO,SACf,CAAC,UAAM,eAAM,SACb,CAAC,cAAU,4BAAS,cACpB,CAAC,aAAS,qBAAO,OACjB,CAAC,iBAAQ,2BAAQ,aACjB,CAAC,iBAAQ,2BAAQ,OACjB,CAAC,iBAAQ,2BAAQ,SAEnBC,WAAY,GACZC,YAAa,GACbC,aAAa,G,EAGfC,mBAAqB,WACnBC,QAAQC,IAAI,0BACZD,QAAQC,IAAI,EAAKP,MAAMC,MACvB,IAAIO,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC/BT,EAAa,EAAKF,MAAMC,KAAKO,GACjCF,QAAQC,IAAIL,GACZ,EAAKU,SAAS,CAAEV,WAAYA,K,EAG9BW,gBAAkB,WAChB,IAAIT,EAAc,EAAKJ,MAAMI,YAC7B,EAAKQ,SAAS,CAAER,aAAcA,K,EAGhCU,aAAe,WACb,IAAIC,EAAUC,SAASC,eAAe,UAClCd,EAAcY,EAAQG,QAAQH,EAAQI,eAAeC,KACzD,EAAKR,SAAS,CAAET,iB,wEAIhB,OACE,kBAAC,IAAMkB,SAAP,KACE,yBAAKC,UAAU,aACb,yBAAKC,GAAG,aAAaD,UAAU,OAC7B,yBAAKA,UAAU,YACb,4BACEC,GAAG,SACHD,UAAU,+BACVE,SAAUC,KAAKX,cAEf,4BAAQY,MAAM,cAAd,sCAGA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,aAAd,kBAKN,yBAAKJ,UAAU,oBACb,yBAAKA,UAAU,aACb,4BAC8B,cAA3BG,KAAKzB,MAAMG,YACRsB,KAAKzB,MAAME,WAAW,GACK,cAA3BuB,KAAKzB,MAAMG,YACXsB,KAAKzB,MAAME,WAAW,GACK,gBAA3BuB,KAAKzB,MAAMG,YACXsB,KAAKzB,MAAME,WAAW,GACtB,MAEN,wBAAIoB,UAAU,WACXG,KAAKzB,MAAMI,aACe,cAA3BqB,KAAKzB,MAAMG,YACT,6BACE,2BAAIsB,KAAKzB,MAAME,WAAW,IAC1B,2BAAIuB,KAAKzB,MAAME,WAAW,KAE1BuB,KAAKzB,MAAMI,aACc,cAA3BqB,KAAKzB,MAAMG,YACX,6BACE,2BAAIsB,KAAKzB,MAAME,WAAW,IAC1B,2BAAIuB,KAAKzB,MAAME,WAAW,KAE1BuB,KAAKzB,MAAMI,aACc,gBAA3BqB,KAAKzB,MAAMG,YACX,6BACE,2BAAIsB,KAAKzB,MAAME,WAAW,IAC1B,2BAAIuB,KAAKzB,MAAME,WAAW,KAE1B,OAGR,yBAAKoB,UAAU,OACb,yBAAKA,UAAU,OACb,4BAAQK,QAASF,KAAKpB,oBAAtB,sBAIF,yBAAKiB,UAAU,OACb,4BAAQK,QAASF,KAAKZ,iBAAtB,8B,GAtGQe,aCKTC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,SD4H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.4e926804.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// import { csv } from \"d3-fetch\";\r\n// import data from \"../data/Urdu_English_Glossary.csv\";\\\r\n//START HERE: Follow these instructions to deploy: https://codeburst.io/deploy-react-to-github-pages-to-create-an-amazing-website-42d8b09cd4d\r\n//OR maybe use https://www.netlify.com/ ??\r\n\r\n//OUTS - fix link to CSS sheets\r\nclass FlashCard extends Component {\r\n  //OUTS: Trying to add data from data folder as state\r\n  //https://stackoverflow.com/questions/51258615/reactjs-d3-parse-local-csv-file-and-passing-it-to-state-with-d3-request\r\n  //https://stackoverflow.com/questions/53804822/how-to-make-react-js-fetch-data-from-api-as-state-and-pass-this-state-data-from\r\n  state = {\r\n    data: [\r\n      [\"aab o havaa\", \"آب و ہوا\", \"climate\"],\r\n      [\"ảpas meṅ\", \"آپس میں\", \"among them/us/you\"],\r\n      [\"ảtả\", \"آٹا\", \"flour\"],\r\n      [\"ảj\", \"آج\", \"today\"],\r\n      [\"ảj kal\", \"آج کل\", \"these days\"],\r\n      [\"ảkhir\", \"آخر\", \"end\"],\r\n      [\"ảdảb\", \"آداب\", \"etiquette\"],\r\n      [\"ảdmḭ\", \"آدمی\", \"man\"],\r\n      [\"ảdhả\", \"آدھا\", \"half\"]\r\n    ],\r\n    randomCard: [],\r\n    finalChoice: \"\",\r\n    showAnswers: false\r\n  };\r\n\r\n  generateRandomCard = () => {\r\n    console.log(\"Generating random card\");\r\n    console.log(this.state.data);\r\n    let randomNumber = Math.floor(Math.random() * 9);\r\n    let randomCard = this.state.data[randomNumber];\r\n    console.log(randomCard);\r\n    this.setState({ randomCard: randomCard });\r\n  };\r\n\r\n  generateAnswers = () => {\r\n    let showAnswers = this.state.showAnswers;\r\n    this.setState({ showAnswers: !showAnswers });\r\n  };\r\n\r\n  handleChange = () => {\r\n    let element = document.getElementById(\"choice\");\r\n    let finalChoice = element.options[element.selectedIndex].text;\r\n    this.setState({ finalChoice });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <div id=\"selections\" className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <select\r\n                id=\"choice\"\r\n                className=\"form-control form-control-sm\"\r\n                onChange={this.handleChange}\r\n              >\r\n                <option value=\"makeChoice\">\r\n                  I want to test my knowledge of....\r\n                </option>\r\n                <option value=\"urduFront\">Nastaleeq</option>\r\n                <option value=\"urduFront\">Romanized</option>\r\n                <option value=\"urduFront\">Translation</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"card text-center\">\r\n            <div className=\"card-body\">\r\n              <h6>\r\n                {this.state.finalChoice === \"Nastaleeq\"\r\n                  ? this.state.randomCard[1]\r\n                  : this.state.finalChoice === \"Romanized\"\r\n                  ? this.state.randomCard[0]\r\n                  : this.state.finalChoice === \"Translation\"\r\n                  ? this.state.randomCard[2]\r\n                  : null}\r\n              </h6>\r\n              <h6 className=\"answers\">\r\n                {this.state.showAnswers &&\r\n                this.state.finalChoice === \"Nastaleeq\" ? (\r\n                  <div>\r\n                    <p>{this.state.randomCard[0]}</p>\r\n                    <p>{this.state.randomCard[2]}</p>\r\n                  </div>\r\n                ) : this.state.showAnswers &&\r\n                  this.state.finalChoice === \"Romanized\" ? (\r\n                  <div>\r\n                    <p>{this.state.randomCard[1]}</p>\r\n                    <p>{this.state.randomCard[2]}</p>\r\n                  </div>\r\n                ) : this.state.showAnswers &&\r\n                  this.state.finalChoice === \"Translation\" ? (\r\n                  <div>\r\n                    <p>{this.state.randomCard[0]}</p>\r\n                    <p>{this.state.randomCard[1]}</p>\r\n                  </div>\r\n                ) : null}\r\n              </h6>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <button onClick={this.generateRandomCard}>\r\n                  Generate New Card\r\n                </button>\r\n              </div>\r\n              <div className=\"col\">\r\n                <button onClick={this.generateAnswers}>\r\n                  Show/Hide Answers\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FlashCard;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport FlashCard from \"./components/flashcard\";\n\nfunction App() {\n  return (\n    <div>\n      <FlashCard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}